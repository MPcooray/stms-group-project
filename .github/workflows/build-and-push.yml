name: Build and Push Containers

on:
  push:
    branches: [main]
    paths:
      - '**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Compute lowercase repo owner
        id: owner
        run: |
          owner="${{ github.repository_owner }}"
          owner_lower=$(echo "$owner" | tr '[:upper:]' '[:lower:]')
          echo "owner_lower=$owner_lower" >> $GITHUB_OUTPUT

      - name: Set image registry variable
        id: registry
        run: |
          owner=${{ steps.owner.outputs.owner_lower }}
          echo "IMAGE_REGISTRY=ghcr.io/$owner" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "IMAGE_SHA_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push single combined image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.owner.outputs.owner_lower }}/stms-app:latest
            ghcr.io/${{ steps.owner.outputs.owner_lower }}/stms-app:${{ github.sha }}
          build-args: |
            VITE_API_BASE_URL=/api

      - name: Verify frontend build baked API base
        env:
          IMAGE: ghcr.io/${{ steps.owner.outputs.owner_lower }}/stms-app:latest
        run: |
          set -euo pipefail
          echo "Pulling image $IMAGE"
          docker pull $IMAGE

          echo "Searching for '/api' in frontend build under /app/wwwroot"
          # Use shell inside a temporary container to search files without running the app
          docker run --rm --entrypoint sh $IMAGE -c "grep -R --line-number --exclude-dir=node_modules '/api' /app/wwwroot || exit 2" || {
            echo 'ERROR: Frontend build does not contain /api references under /app/wwwroot'
            exit 1
          }
